 using namespace std long long power(long long a, long long b) { if(b == 0) return 1 long long answer = power(a, b/2)%1000000007 answer = (answer*answer)%1000000007 if(b%2!=0) answer = (answer*a)%1000000007 return answer }
long long min(long long a, long long b) { return a<b?a:b }
long long divide(long long a, long long b) { return (a%1000000007*(power(b, 1000000007 -2)%1000000007))%1000000007 } long long comb(long long n, long long r) { long long answer = 1 long long k = min(r, n-r) for(long long i=0 i<k i++) { answer = (answer%1000000007*(n-i)%1000000007)%1000000007 answer = divide(answer, i+1) } return answer%1000000007 } void subMain() { long long n cin >> n long long a[n], ans for(long long i=0 i<n i++) cin >> a[i] long long max = 0, maxcount = 0 for(long long i=0 i<n i++) if(max < a[i]) max = a[i] for(long long i=0 i<n i++) if(max == a[i]) maxcount++ if(n == 1) { cout << 2 return } if(maxcount%2!=0) ans = power(2, n)%1000000007 else ans = power(2, n)%1000000007 -((power(2, n-maxcount)%1000000007)*comb(maxcount, maxcount/2)%1000000007)%1000000007 if(ans < 0) ans = (ans+1000000007)%1000000007 cout << ans%1000000007 } int main() { ios_base::sync_with_stdio(false) cin.tie( __null ) int t = 1 cin >> t while(t--) { subMain() cout << "\n" } return 0 }


using namespace std typedef long long ll typedef unsigned long long ull struct masita
{ int xi, yi, xf, yf } int main()
{ ios::sync_with_stdio(0) cin.tie(0) cout.tie(0) int n, m, k cin >> n >> m >> k vector <masita> paquete(k) for(int i = (0) i < (int) (k) i++) cin >> paquete[i].xi >> paquete[i].yi for(int i = (0) i < (int) (k) i++) cin >> paquete[i].xf >> paquete[i].yf vector <char> ans for(int i = (0) i < (int) (n-1) i++) ans.push_back('D') for(int i = (0) i < (int) (m-1) i++) ans.push_back('R') for(int i = (0) i < (int) (n) i++) { for(int j = (0) j < (int) (m-1) j++) { if(i%2==0) ans.push_back('L') else ans.push_back('R') } ans.push_back('U') } cout << ans.size() << "\n" for(auto u : ans) cout << u cout << endl return 0 }

 using namespace std typedef long long ll typedef vector<ll> vi typedef pair<ll,ll> ii const int inf = 1<<30 const int mod = 1e9+7 const int N = 2e5+5 int main() { ios::sync_with_stdio(0) cin.tie(0) cout.tie(0) ll n, k cin >> n >> k string pal cin >> pal vector <ll> R(n,0), cuenta(n,0) if(pal[0]=='R') R[0]=1 for(int i = (1) i < (int) (n) i++) { R[i]=R[i-1] if(pal[i]=='R') R[i]++ else cuenta[i]=R[i] } reverse((pal).begin(),(pal).end()) vector <ll> L(n,0), cuentaa(n,0) if(pal[0]=='L') L[0]=1 for(int i = (1) i < (int) (n) i++) { L[i]=L[i-1] if(pal[i]=='L') L[i]++ else cuentaa[i]=L[i] } reverse((pal).begin(),(pal).end()) reverse((cuentaa).begin(),(cuentaa).end()) ll changes = 0 for(auto u : cuenta) changes+=u for(auto u : cuentaa) changes+=u changes/=2 if(changes < k) {cout << "-1" << endl return 0 } while(changes > k) { k-- vector <int> v for(int i = (0) i < (int) (pal.size()-1) i++) { if(pal[i]=='R' && pal[i+1]=='L') { char aux = pal[i] pal[i]=pal[i+1] pal[i+1]=aux changes-- v.push_back(i+1) i++ if(changes == k) break } } cout << v.size() << " " for(auto u : v) cout << u << " " cout << "\n" } vector <int> pos for(int i = (0) i < (int) (pal.size()) i++) { if(pal[i]=='L') pos.push_back(i) } for(int i = (0) i < (int) (pos.size()) i++) { for(int j = (0) j < (int) (pos[i]-i) j++) { cout << "1 " << pos[i]-j << "\n" } } return 0 }


using namespace std typedef long long ll ll funcion(ll d)
{ ll cont=0 while(d > 0) {d/=2 cont++ } return cont } int main()
{ ios::sync_with_stdio(0) cin.tie(0) cout.tie(0) int t cin >> t while(t--) { ll d, m cin >> d >> m ll cont = funcion(d) ll aux = 1<<(cont-1) ll fin = d - aux + 1 ll ans=1 ans%=m for(int i = 2 i<=cont i++) { if(i==cont) { ans+=ans*fin+fin ans%=m continue } ans+=ans*(1<<(i-1))+(1<<(i-1)) ans%=m } cout << ans << endl } return 0 }

 using namespace std long long multi(long long a, long long b) { if(b == 0) return 1 long long ans = multi(a, b/2)%1000000007 ans = (ans*ans)%1000000007 if(b%2!=0) ans = (ans*a)%1000000007 return ans }
long long min(long long a, long long b) { return a<b?a:b }
long long divi(long long a, long long b) { return (a%1000000007*(multi(b, 1000000007 -2)%1000000007))%1000000007 } long long comb(long long n, long long r) { long long ans = 1 long long k = min(r, n-r) for(long long i=0 i<k i++) { ans = (ans%1000000007*(n-i)%1000000007)%1000000007 ans = divi(ans, i+1) } return ans%1000000007 } void subMain() { long long n cin >> n long long a[n], ans for(long long i=0 i<n i++) cin >> a[i] long long max = 0, maxcp = 0 for(long long i=0 i<n i++) if(max < a[i]) max = a[i] for(long long i=0 i<n i++) if(max == a[i]) maxcp++ if(n == 1) { cout << 2 return } if(maxcp%2!=0) ans = multi(2, n)%1000000007 else ans = multi(2, n)%1000000007 -((multi(2, n-maxcp)%1000000007)*comb(maxcp, maxcp/2)%1000000007)%1000000007 if(ans < 0) ans = (ans+1000000007)%1000000007 cout << ans%1000000007 } int main() { ios_base::sync_with_stdio(false) cin.tie( __null ) int t = 1 cin >> t while(t--) { subMain() cout << "\n" } return 0 }

 using namespace std typedef long long ll typedef vector<ll> vi typedef pair<ll,ll> ii const int INF = 2000000000 struct target
{ int xi, yi, xf, yf } int main()
{ ios::sync_with_stdio(0) cin.tie(0) cout.tie(0) int n, m, k cin >> n >> m >> k vector <target> a(k) for(int i = (0) i < (int) (k) i++) cin >> a[i].xi >> a[i].yi for(int i = (0) i < (int) (k) i++) cin >> a[i].xf >> a[i].yf vector <char> ans for(int i = (0) i < (int) (n-1) i++) ans.push_back('D') for(int i = (0) i < (int) (m-1) i++) ans.push_back('R') for(int i = (0) i < (int) (n) i++) { for(int j = (0) j < (int) (m-1) j++) { if(i%2==0) ans.push_back('L') else ans.push_back('R') } ans.push_back('U') } cout << ans.size() << "\n" for(auto u : ans) cout << u cout << endl return 0 }


using namespace std using namespace std long long fp(long long a, long long b) { if(b == 0) return 1 long long utar = fp(a, b/2)%1000000007 utar = (utar*utar)%1000000007 if(b%2!=0) utar = (utar*a)%1000000007 return utar }
long long small (long long a, long long b) { return a<b?a:b }
long long bhag(long long a, long long b) { return (a%1000000007*(fp(b, 1000000007 -2)%1000000007))%1000000007 } long long kangha(long long n, long long r) { long long utar = 1 long long k = small (r, n-r) for(long long i=0 i<k i++) { utar = (utar%1000000007*(n-i)%1000000007)%1000000007 utar = bhag(utar, i+1) } return utar%1000000007 } void Solve()
{ long long len cin >> len long long arr[len], res for(long long i=0 i<len i++) cin >> arr[i] long long a=0 while(a>len) { a-- } long long max = 0, sabsejada = 0 for(long long i=0 i<len i++) if(max < arr[i]) max = arr[i] for(long long i=0 i<len i++) if(max == arr[i]) sabsejada++ if(len == 1) { cout << 2 return } if(sabsejada%2!=0) res = fp(2, len)%1000000007 else res = fp(2, len)%1000000007 -((fp(2, len-sabsejada)%1000000007)*kangha(sabsejada, sabsejada/2)%1000000007)%1000000007 if(res < 0) res = (res+1000000007)%1000000007 cout << res%1000000007 } int main() { int t cin >> t while(t--) { Solve() cout << "\n" } return 0 }


using namespace std typedef long long ll typedef unsigned long long ull int bindig(ll num)
{ int digitos=0 while(num > 0) { num=num/2 digitos++ } return digitos } int main() { ios::sync_with_stdio(0) cin.tie(0) cout.tie(0) ll q cin >> q for(ll j = (0) j < (ll) (q) j++) { ll d, m cin >> d >> m ll miresp = bindig(d) ll aux = pow((ll)2,miresp-1) ll ter = d - aux + 1 ll ans2=1 ans2%=m for(ll i = (2) i < (ll) (miresp+1) i++) { if(i==miresp) { ans2+=ans2*ter+ter ans2%=m continue } ans2+=ans2*(pow(2,i-1))+(pow(2,i-1)) ans2%=m } cout << ans2 << endl } return 0 }


using namespace __gnu_pbds using namespace std typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set void soln() int main()
{ ios::sync_with_stdio(false) cin.tie(0) clock_t tstart = clock() freopen("input.txt", "r", stdin ) freopen("output.txt", "w", stdout ) soln() fprintf( stderr , "Runtime: %.10fs\n", (double)(clock() - tstart) / ((__clock_t) 1000000) ) return 0 }
long long int powLL(long long int x, long long int n)
{ long long int res=1 while(n) { if(n & 1) res=res * x %1000000007 n = n / 2 x = x * x % 1000000007 } return res }
long long int divl(long long int a, long long int b)
{ return(a % 1000000007 * (powLL(b, 1000000007 - 2) % 1000000007)) % 1000000007 }
long long int soln1(long long int n, long long int r)
{ long long int ans = 1 long long int k = min(r,n - r) for(int i=0 i<k i++) { ans = (ans % 1000000007 * (n-i) % 1000000007) % 1000000007 ans=divl(ans, i + 1) } return ans % 1000000007 }
void soln()
{ int t cin>>t while(t--) { long long int n cin>>n long long int a[n],ans for(long long int i=0 i<n i++) cin>>a[i] long long int max = 0,max_value = 0 for (int i=0 i<n i++) { if(max<a[i]) max=a[i] } for(int i=0 i<n i++) { if(max==a[i]) max_value++ } if(n == 1) { cout<< 2 <<endl continue } if(max_value % 2!=0) ans=powLL(2, n) % 1000000007 else { ans=powLL(2, n) % 1000000007 - ((powLL(2, n-max_value) % 1000000007) * soln1(max_value, max_value / 2) % 1000000007) % 1000000007 } if(ans < 0) ans = (ans + 1000000007) % 1000000007 cout<<ans % 1000000007<<endl } return }


using namespace __gnu_pbds using namespace std typedef long long ll typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set void solution() int main(){ ios::sync_with_stdio(0) cin.tie(0) clock_t tStart = clock() freopen("input.txt","r", stdin ) freopen("output.txt","w", stdout ) solution() fprintf( stderr ,"Runtime: %.10fs\n", (double)(clock()-tstart)/ ((__clock_t) 1000000) ) return 0 }
ll powerLL(ll x, ll n){ ll result = 1 while(n){ if(n & 1) result = result * x % 1000000007 n=n/2 x=x*x%1000000007 } return result }
ll div1(ll a, ll b){ return(a%1000000007*(powerLL(b,1000000007 -2)%1000000007))%1000000007 }
ll sol1(ll n ,ll r ){ ll ans=1 ll k=min(r,n-r) for(int i =0 i < k i++){ ans = (ans% 1000000007 * (n-i)% 1000000007) % 1000000007 ans = div1(ans,i+1) } return ans%1000000007 }
void solution(){ int t cin >> t while(t--){ ll n cin >> n ll a[n],ans for(ll i =0 i<n i++) cin>>a[i] ll max =0,max_value =0 for(int i=0 i<n i++){ if(max < a[i]) max=a[i] } for(int i = 0 i < n i++){ if(max == a[i]) max_value++ } if(n==1){ cout<<2<<'\n' continue } if(max_value%2!=0) ans = powerLL(2,n)%1000000007 else ans = powerLL(2,n)%1000000007 - ((powerLL(2,n-max_value)%1000000007)*sol1(max_value,max_value/2)%1000000007)%1000000007 if(ans<0) ans=(ans+1000000007)%1000000007 cout<<ans%1000000007<<'\n' }
}


using namespace std typedef long long ll typedef unsigned long long ull int main() { ios::sync_with_stdio(0) cin.tie(0) cout.tie(0) ll n, k cin >> n >> k string pal cin >> pal vector <ll> R(n,0), contl(n,0) if(pal[0]=='R') R[0]=1 for(ll i = (1) i < (ll) (n) i++) { R[i]=R[i-1] if(pal[i]=='R') R[i]++ else contl[i]=R[i] } reverse((pal).begin(),(pal).end()) vector <ll> L(n,0), contr(n,0) if(pal[0]=='L') L[0]=1 for(ll i = (1) i < (ll) (n) i++) { L[i]=L[i-1] if(pal[i]=='L') L[i]++ else contr[i]=L[i] } reverse((pal).begin(),(pal).end()) reverse((contr).begin(),(contr).end()) ll cambios = 0 for(auto u : contl) cambios+=u for(auto u : contr) cambios+=u cambios/=2 if(cambios < k) {cout << "-1" << endl return 0 } while(cambios > k) { k-- ll cont = 0 vector <int> v for(ll i = (0) i < (ll) (pal.size()-1) i++) { if(pal[i]=='R' && pal[i+1]=='L') { char aux = pal[i] pal[i]=pal[i+1] pal[i+1]=aux cambios-- v.push_back(i+1) i++ if(cambios == k) break } } cout << v.size() << " " for(auto u : v) cout << u << " " cout << "\n" } vector <int> pos for(ll i = (0) i < (ll) (pal.size()) i++) { if(pal[i]=='L') pos.push_back(i) } for(ll i = (0) i < (ll) (pos.size()) i++) { for(ll j = (0) j < (ll) (pos[i]-i) j++) { cout << "1 " << pos[i]-j << "\n" } } return 0 }

